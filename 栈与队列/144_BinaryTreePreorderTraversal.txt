递归版：
class Solution:
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        l=[]
        self._helper(root,l)
        return l
    
    def _helper(self,root,l):
        if root:
            l.append(root.val)
            self._helper(root.left,l)
            self._helper(root.right,l)
			
用栈模拟系统递归高级版：
class Command:
    def __init__(self,command,node):
        self.command=command
        self.node=node

class Solution:
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        rl=[]
        if root is None:
            return rl
        stack=[]
        stack.append(Command('go',root))
        while len(stack)>0:
            com=stack.pop()
            node=com.node
            if com.command=='print':
                rl.append(node.val)
            else:
                if node.right:
                    stack.append(Command('go',node.right))
                if node.left:
                    stack.append(Command('go',node.left))
                stack.append(Command('print',node))
        return rl
		
操作系统处理递归的时候其实就是这样的。
当前函数运行完毕后，操作系统完全不知道该干嘛，它只能去弹栈，根据栈里面的信息决定接下来干什么
如果栈是空的，说明递归结束。