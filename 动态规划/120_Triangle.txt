二刷表示，这道题是每个点有一个解，而不是每一层有一个解。。。我还不如第一次聪明啊
总的来说就是，对于动态规划的题，一定要考虑好什么是最小子问题，存在着什么样的重叠子问题，如果可以的话，求出状态定义和状态转移方程，再下手。
记忆化搜索
class Solution:
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        memo=[['A']*n for n in range(1,len(triangle)+1)]
        for i,num in enumerate(triangle[-1]):
            memo[-1][i]=num
        return self.memoSearch(triangle,memo,0,0)
    
    def memoSearch(self,triangle,memo,x,y):
        if memo[x][y]=='A':
            memo[x][y] = min(self.memoSearch(triangle, memo, x + 1, y), self.memoSearch(triangle, memo, x + 1, y + 1))+triangle[x][y]
        return memo[x][y]

动态规划，O(1)空间复杂度		
class Solution:
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        for i in range(len(triangle)-2,-1,-1):
            for j in range(len(triangle[i])):
                triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1])
        return triangle[0][0]
		

要找到问题的最小子问题和重叠子问题。
这道题是自顶向下的，所以，最下面一层是最小的子问题，这一层的答案就是他自身。所以，我们的memo是从下往上计算的。
重叠子问题是，对于一个点，他的最小路径是他加上他下层左右两个邻居中数值小的那一个邻居，而这两个邻居分别又有自己的邻居。而这些问题的答案不应该计算多次。