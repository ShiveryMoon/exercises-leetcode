记忆化搜索
class Solution:
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        memo=[['A']*n for n in range(1,len(triangle)+1)]
        for i,num in enumerate(triangle[-1]):
            memo[-1][i]=num
        return self.memoSearch(triangle,memo,0,0)
    
    def memoSearch(self,triangle,memo,x,y):
        if memo[x][y]=='A':
            memo[x][y] = min(self.memoSearch(triangle, memo, x + 1, y), self.memoSearch(triangle, memo, x + 1, y + 1))+triangle[x][y]
        return memo[x][y]

动态规划，O(1)空间复杂度		
class Solution:
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        for i in range(len(triangle)-2,-1,-1):
            for j in range(len(triangle[i])):
                triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1])
        return triangle[0][0]