状态定义：F(n,i,j)考虑从[0....n]个数字串中取元素，在不超过i,j的情况下所能取到的最多的元素个数
状态转移方程：F(n,i,j)=max(F(n-1,i,j),1+F(n-1,i-I[n],j-J[n]))
class Solution:
    def findMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        memo=[[0 for i in range(n+1)] for j in range(m+1)]
        for s in strs:
            numzeros=s.count('0')
            numones=s.count('1')
            for i in range(m,numzeros-1,-1):
                for j in range(n,numones-1,-1):
                    memo[i][j]=max(memo[i][j],1+memo[i-numzeros][j-numones])
        return memo[-1][-1]

TLE at 61/63 tests
		
以后记住，给定值的，是容量，用列表形式给出的，是“物品”
这道题相当于，重量是m，体积是n，每个物品都有自己的重量和体积。要算出该背包能放下的最多的物品是多少。
注意，这道题的物品可以没有重量或者没有体积。所以，注意for循环的边界，这道题需要可以并且也需要处理memo[0]的情况。
有个技巧可以直接处理边界：像这个解法一样将numzeros-1作为边界，而不是将if语句写在循环内部，因为for循环的边界会优先考虑，让内部的if不起作用，比如：
for i in range(5,3,-1):
	if i>2: do()
	如果内逻辑是对的，而外逻辑是错的，那么这道题就错了，因为外逻辑覆盖了内逻辑，i其实可以等于3的，而外逻辑不让i等于3
这公式带进去就莫名其妙做出来了，太尴尬了。
终于有点高数的感觉了。我只想好好带公式，我不想了解具体细节。。。太恶心了。

15 16行全倒序，因为这两个都是背包容量。
这道题不需要对memo进行初始化，因为这只是个巧合。尽量对所有背包问题都进行初始化。