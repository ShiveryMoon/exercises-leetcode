记忆化搜索
from cmath import sqrt

class Solution:
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo=[sys.maxsize]*(n+1)
        memo[0]=0
        return self.memoSearch(n,memo)
    
    def memoSearch(self,n,memo):
        if memo[n]==sys.maxsize:
            for i in range(1,int(sqrt(n).real)+1):
                memo[n]=min(memo[n],self.memoSearch(n-i*i,memo)+1)
        return memo[n]
		
动态规划
from cmath import sqrt

class Solution:
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo=[n]*(n+1)
        memo[0]=0
        for i in range(1,n+1):
            for j in range(1,int(sqrt(i).real)+1):
                memo[i]=min(memo[i],memo[i-j*j]+1)
        return memo[n]


注，上面两个代码都得到TLE，评论区里大家也说了，python就是慢，只能TLE
有一个优化方式就是把所有小于n的平方数存在列表里用，而不是每次都计算j*j
但即便这样，也是TLE
		
广度优先遍历：
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        queue=[]
        visited=[False]*(n+1)
        queue.insert(0,(n,0))
        visited[n]=True
        while queue:
            num=queue.pop()
            i=1
            while True:
                a=num[0]-i*i
                if a<0:
                    break
                if a==0:
                    return num[1]+1
                if not visited[a]:#如果已经访问过，就不再加入队列了，这样保证不会绕远
                    queue.insert(0,(a,num[1]+1))
                    visited[a]=True
                i+=1
				
这题值得多思考，虽然我现在做出来了，但是感觉过几天又会忘掉。。
它这棵树的每个节点就是一个tuple。整棵树其实就是正整数集，是一颗天然的已经创建好的树。
这是单源最短路径算法，牢记这一点，这样在遍历的时候你才能看懂，为什么每个点只访问一次的情况下，对于其他点来说是公平的
因为我们找的又不是其他点的最短路径，管他们干什么。
广度优先遍历就是找到所有可能，再给所有可能找他们的所有可能。