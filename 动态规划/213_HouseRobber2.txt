class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return nums[0]
        return max(self.helper(nums[:-1]),self.helper(nums[1:]))
    
    def helper(self,nums):
        memo=[-1 for i in range(len(nums)+1)]
        memo[0]=0
        memo[1]=nums[0]
        for i in range(2,len(nums)+1):
            memo[i]=max(nums[i-1]+memo[i-2],memo[i-1])
        return memo[-1]
		
这题如果我不看discuss/hints是绝对想不到的。。
我们可以打破这个圈，让这道题退化成HouseRobber1
分成以下两种情况：
1.第一个房子到倒数第二个房子
2.第二个房子到倒数第一个房子
将这两个情况分别带入HouseRobber1，然后取最大值就好了。
这其实是命题和逆否命题的关系
描述1：第一个房子和最后一个房子不能一起取
描述2：要么取第一个房子到倒数第二个房子，要么取第二个房子到倒数第一个房子
这两个描述是等价的