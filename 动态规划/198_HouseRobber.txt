记忆化搜索：
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        memo=[-1 for x in range(len(nums))]
        return self.tryRob(nums,memo,0)
    
    def tryRob(self,nums,memo,index):
        if index>=len(nums):
            return 0
        if memo[index]==-1:
            for i in range(index,index+2 if index+2<=len(nums) else len(nums)):
                memo[index]=max(memo[index],nums[i]+self.tryRob(nums,memo,i+2))
        return memo[index]
		
动态规划：
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        memo=[-1 for x in range(len(nums))]
        memo[-1]=nums[-1]
        for i in range(len(nums)-2,-1,-1):
            for j in range(i,i+2 if i+2<=len(nums) else len(nums)):
                memo[i]=max(memo[i],nums[j]+(memo[j+2] if j+2<len(nums) else 0))
        return memo[0]
		
反过来抢的动态规划：		
class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        memo=[-1 for x in range(len(nums))]
        memo[0]=nums[0]
        for i in range(1,len(nums)):
            for j in range(i-1 if i-1>=0 else 0,i+1):
                memo[i]=max(memo[i],nums[j]+(memo[j-2] if j-2>=0 else 0))
        return memo[-1]
		
这个“try”真的是精髓。。
事实上对于memo[i]，我们只要考虑从i开始抢，还是从i+1开始抢，这两种情况就好了
try(i,i+1)就是判断这两个作为起点开始抢的话谁大，谁更大，memo[i]就等于谁
这个try真的是要想明白到底是什么意思
同理于HOUSEROBBER3