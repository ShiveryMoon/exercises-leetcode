这题的状态和300一样
class Solution:
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n=len(nums)
        if n==0:
            return 0
        memo=[[1,0] for x in range(n)]
        for i in range(1,n):
            for j in range(i):
                if nums[i]==nums[j]:
                    continue
                if memo[j][1]==0:
                    if memo[i][0]==1:
                        memo[i][0]=2
                        if nums[i]>nums[j]:
                            memo[i][1]=-1
                        else:
                            memo[i][1]=1
                elif memo[j][1]==1:
                    if nums[i]>nums[j] and memo[i][0]<1+memo[j][0]:
                        memo[i][0]=1+memo[j][0]
                        memo[i][1]=-1
                else:
                    if nums[i]<nums[j] and memo[i][0]<1+memo[j][0]:
                        memo[i][0]=1+memo[j][0]
                        memo[i][1]=1
        m=0
        for num in memo:
            m=max(m,num[0])
        return m
这题有两个topic，动态规划On^2和贪心On。
暂时只写一个动态规划的，也不想怎么优化了，毕竟思路已经出来了。
而且看了一下排行榜，比我快的都是贪心。