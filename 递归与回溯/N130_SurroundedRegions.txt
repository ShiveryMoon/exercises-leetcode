class Solution:
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        rl=[]
        m=len(board)
        if m==0:
            return True
        n=len(board[0])
        ds=[[-1,0],[0,1],[1,0],[0,-1]]
        visited=[[False for x in range(n)] for y in range(m)]
        for i in range(m):
            for j in range(n):
                if board[i][j]=='O' and not visited[i][j]:
                    tl=[]
                    self.floodfill(board,m,n,ds,visited,i,j,tl)
                    if False not in tl:
                        rl.append(tl)
        for region in rl:
            for x,y in region:
                board[x][y]='X'
            
    def inArea(self,x,y,m,n):
        return x>=0 and y>=0 and x<m and y<n
    
    def floodfill(self,board,m,n,ds,visited,startx,starty,tl):
        visited[startx][starty]=True
        tl.append((startx,starty))
        for i in range(4):
            newx=startx+ds[i][0]
            newy=starty+ds[i][1]
            if not self.inArea(newx,newy,m,n):
                tl.append(False)
                continue
            if board[newx][newy]=='O' and not visited[newx][newy]:
                self.floodfill(board,m,n,ds,visited,newx,newy,tl)
        
最长的测试用例过不了，栈溢出
第二种写法，然而依旧栈溢出。栈溢出应当通过减小最大深度来解决，跟时间复杂度的优化无关。
class Solution:
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        ds=[[-1,0],[0,1],[1,0],[0,-1]]
        m=len(board)
        if m==0:
            return True
        n=len(board[0])
        visited=[[False for i in range(n)] for j in range(m)]
        rl=[]
        for i in range(m):
            for j in range(n):
                if board[i][j]=='O' and not visited[i][j]:
                    sl=[]
                    if self.floodfill(board,ds,m,n,visited,i,j,sl):
                        rl.extend(sl)
        for x,y in rl:
            board[x][y]='X'
                        
    def atEdge(self,m,n,x,y):
        return x==0 or y==0 or x==m-1 or y==n-1
                        
    def floodfill(self,board,ds,m,n,visited,startx,starty,sl):
        visited[startx][starty]=True
        if self.atEdge(m,n,startx,starty):
            return False
        sl.append([startx,starty])
        bl=[]
        for i in range(4):
            newx=startx+ds[i][0]
            newy=starty+ds[i][1]
            if board[newx][newy]=='O' and not visited[newx][newy]:
                bl.append(self.floodfill(board,ds,m,n,visited,newx,newy,sl))
        if False in bl: 
            return False
        else:
            return True
        