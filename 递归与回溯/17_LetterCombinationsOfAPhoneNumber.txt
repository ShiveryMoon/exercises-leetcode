class Solution:
    def __init__(self,*args,**kwargs):
        super(Solution,self).__init__(*args,**kwargs)
        self.rl=[]
        self.letterMap=['','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']
这样的写法肯定是更舒服的，但是我不知道leetcode上的构造函数具体该怎么覆盖，我怕有坑，就没用
		
		
class Solution:
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        rl=[]
        letterMap=[' ','','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']
        if digits:
            self.findCombinations(digits,0,'',rl,letterMap)因为我很清楚python对列表是引用传递，所以我直接这么写，而不用担心性能问题。事实证明这个代码beat 100%
        return rl
    
    def findCombinations(self,digits,index,s,rl,letterMap):
        if len(digits)==index:
            rl.append(s)
        else:
            number=digits[index]
            letters=letterMap[int(number)]
            for letter in letters:所以一个人就可以分出好几条支
                self.findCombinations(digits,index+1,s+letter,rl,letterMap)
				
这里用回溯法，因为每个按键上的字母个数不是固定的。
如果每个按键都有3个字母，那就直接三重循环就好了