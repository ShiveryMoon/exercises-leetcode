class Solution:
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        rl=[]
        m=len(matrix)
        if m==0:
            return rl
        n=len(matrix[0])
        ds=[[-1,0],[0,-1],[1,0],[0,1]]
        status=[[False for x in range(n)] for y in range(m)]
        status[m-1][0]=status[0][n-1]=True
        visited=[[0 for x in range(n)] for y in range(m)]
        times=0
        for i in range(m):
            for j in range(n):
                times+=1
                td={'Pacific':False,'Atlantic':False}
                self.dfs(matrix,m,n,ds,status,visited,times,i,j,td)
                if td['Pacific'] and td['Atlantic']:
                    status[i][j]=True
                    rl.append([i,j])
        return rl
    
    def inPacific(self,x,y):
        return x==-1 or y==-1
    
    def inAtlantic(self,x,y,m,n):
        return x==m or y==n
    
    def dfs(self,matrix,m,n,ds,status,visited,times,startx,starty,td):
        visited[startx][starty]=times
        if status[startx][starty]==True:
            td['Pacific']=td['Atlantic']=True
            return True
        for i in range(4): #能到这里说明这个点没查过
            if td['Pacific'] and td['Atlantic']:
                break
            newx=startx+ds[i][0]
            newy=starty+ds[i][1]
            if self.inPacific(newx,newy):
                td['Pacific']=True
                continue
            if self.inAtlantic(newx,newy,m,n):
                td['Atlantic']=True
                continue
            if matrix[newx][newy]<=matrix[startx][starty] and visited[newx][newy]!=times:
                self.dfs(matrix,m,n,ds,status,visited,times,newx,newy,td)
				
106/113 pass
我设置times变量的原因，其实是想让主函数的双重循环的每次循环都使用全新的visited表格。
所以，其实在循环内部重新定义一个新的visited表格也是可以的，不需要使用times。
status表格存的是已经符合条件的点。如果在判断某个点是否符合条件的时候，能找到一条路径走到status中已经True的点，就直接返回True。
由于既属于太平洋又属于大西洋的点只有左下角和右上角，所以43和46的if不会一起进去的，我这么写的逻辑是对的。