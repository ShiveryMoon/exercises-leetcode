class Solution:
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n=len(nums)
        if n==0:
            return 0
        prev=None
        res=1
        for i in range(n-1):
            if nums[i]>nums[i+1] and (prev==1 or prev==None):
                res+=1
                prev=-1
            elif nums[i]<nums[i+1] and (prev==-1 or prev==None):
                res+=1
                prev=1
        return res
		
这道题没有res重新计算的情况，“从列表中间选择起始点”是不可能比“将列表头作为起始点”能得到的答案更好，顶多答案一样。
所以起始点就是开头。
贪心思想体现在，如果碰到连续上升或下降子序列，就选择该连续序列的最后一个值作为最长弯曲子序列的一部分。
比如[1,17,5,10,13,15,10,5,16,8]，当遍历到5的时候，目前的最长弯曲子序列是[1,17,5]
由于10>5,13>10,15>13，而15>10，可知15是连续上升序列的最后一个数
所以将15放入最长弯曲子序列，即[1,17,5,15]。
选择最大的数放入最长弯曲子序列，可以给后面的数留下最多的富余，因为下一个逻辑是小于逻辑。
