动态规划(TLE):
class Solution:
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        length=len(intervals)
        if length == 0:
            return 0
        memo=[1 for i in range(length)]
        intervals.sort(key=lambda x:(x.start,x.end))
        res=1
        for i in range(1,length):
            for j in range(i):
                if intervals[i].start>=intervals[j].end:#这一行就是下面的贪心算法的核心逻辑
                    memo[i]=max(memo[i],1+memo[j])
            res=max(res,memo[i])
        return length-res
和LIS一模一样，倒是这个tuple+sort让我学到了新东西

贪心：
class Solution:
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: int
        """
        length=len(intervals)
        if length==0:
            return 0
        intervals.sort(key=lambda x:(x.end,x.start))
        curEnd=intervals[0].end
        res=1
        for i in range(1,length):
            if intervals[i].start>=curEnd:
                res+=1
                curEnd=intervals[i].end
        return length-res
            