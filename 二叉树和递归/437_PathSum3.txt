class Solution:
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        if root is None:
            return 0
        return self.findPath(root,sum)+self.pathSum(root.left,sum)+self.pathSum(root.right,sum)
    
    def findPath(self,root,sum):
        if root is None:
            return 0
        res=0
        if root.val == sum:
            res+=1
        res+=self.findPath(root.left,sum-root.val)
        res+=self.findPath(root.right,sum-root.val)
        return res
		
上面是老师的解，下面是我的解
		
class Solution:
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        self.rl=[0]
        self.f(root,sum)
        return self.rl[0]
    
    def f(self,root,sum):
        if root:
            self.findPath(root,sum)
            self.f(root.left,sum)
            self.f(root.right,sum)
            
    def findPath(self,root,s):
        if root:
            if root.val==s:
                self.rl[0]+=1
            self.findPath(root.left,s-root.val)
            self.findPath(root.right,s-root.val)
		
我认为我的解法更清晰。这题和PathSum1和2的区别在于，不仅结尾可以是任意节点，连开头都可以是任意节点。
“结尾可以是任一节点”这个条件，其实是很简单的，43行的判断把叶子节点的限制取消就好了
“开头可以是任意节点”这个条件其实也不难。
对于这道题，每个节点有两种情况：1.我是起点 2.我是中间点。所有情况都要考虑到。
对于第一种情况，很简单，把所有的节点当做起点来调用findPath。PathSum1和2里不是只将root作为起点吗，这道题我们遍历所有点，调用n次findPath
函数f就是干这件事的，而且只干了这一件事。
那么第二种情况，是findPath做的。这个就不用讲了，这个函数和PathSum1和2区别不大的。