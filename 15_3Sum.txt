class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        rList = []
        d1={}
        for num in nums:
            if num not in d1:
                d1[num]=1
            else:
                d1[num]+=1
        for l in range(len(nums)):
            if d1[nums[l]]>0:
                found=False
                d1[nums[l]] -= 1
                d2 = d1.copy()
                for r in range(l + 1, len(nums)):
                    if d2[nums[r]]>0:
                        d2[nums[r]] -= 1
                        if d2.get(0 - nums[l] - nums[r],0)>0:
                            rList.append([nums[l], nums[r], 0 - nums[l] - nums[r]])
                            d2[0 - nums[l] - nums[r]] = 0
                            d2[nums[r]]=0
                d1[nums[l]]=0
        return rList
		
# 311/313 超时。第311号测试用例太大，而我又找不到优化的办法。
#这道题用对撞指针很简单。
class Solution:
    def threeSum(self, nums):
        res = []
        nums.sort()
        for i in range(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            l, r = i+1, len(nums)-1
            while l < r:
                s = nums[i] + nums[l] + nums[r]
                if s < 0:
                    l +=1 
                elif s > 0:
                    r -= 1
                else:
                    res.append((nums[i], nums[l], nums[r]))
                    while l < r and nums[l] == nums[l+1]:
                        l += 1
                    while l < r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1; r -= 1
        return res